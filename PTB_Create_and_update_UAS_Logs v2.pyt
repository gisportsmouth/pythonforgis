# -*- coding: utf-8 -*-import arcpyfrom arcgis.gis import GISgis = GIS('home')import pandas as pdimport numpy as npfrom pathlib import Pathfrom datetime import datetimefrom arcgis.features import FeatureLayerCollectionimport refrom dateutil.parser import parse#default namesuas_log = 'UoP UAS Logs'batt_log = 'UoP UAS Battery Logs'reg = 'UoP UAS Registrations'rp = 'UoP Remote Pilot Registration'uas_folder = 'RPAS General'class OverwriteProtection(Exception):    def __init__(self, item):        self.message = (f'Published Table {item} already exists, overwriting'                        ' will delete the old item and create a new item'                        ' therefore affecting Dashboards.'                        ' Use object.set_overwrite() to'                        ' to confirm you wish to proceed and run publish again')         super().__init__(self.message)       class FeatureNotPublished(Exception):    def __init__(self):        self.message = ('Published Table does not exists,'                        ' use publish() to create one')         super().__init__(self.message)                 class BasicLogs():    '''        '''        def __init__(self                 , csv                 , agol_folder                 , agol_csv                 , overwrite=False):                self.overwrite = overwrite        self.csv = csv        self.agol_folder = agol_folder        self.agol_csv = agol_csv        self.ft_item = self.find_ft('Feature Service')         #remove known erroneous duplicates        self.drop_list = ['SR01309373'                        ,'SR01273232'                        ,'SR01273238'                        ,'SR01313685'                        ,'SR01319495'                        ,'SR01232717'                         ,'SR01322701'                        ,'SR01334022'                        ,'SR01358395'                        ,'SR01470315'                        ,'SR01470319'                        ,'SR01470322'                        ,'SR01470330'                        ,'SR01500663'                        ,'SR01530484'                        ,'SR01530489'                        ,'SR01541361'                        ,'SR01541365'                        ,'SR01541368'                        ,'SR01541369'						,'SR01547525'                        ]            def __repr__(self):         return  (f'CSV File: {self.csv}, input feature table if existing:'                f' {self.agol_csv}')        def __str__(self):         return (f'CSV File: {self.csv}, input feature table if existing:'                f'{self.agol_csv}')            @staticmethod    def clean_minutes(min_log):        '''Helper function:            Some records show minutes as '7 minutes', '7 Minutes', '30m 29s'                 or 30:25, as entered by the user. This function converts any                 values in the above format to rounded minutes        '''        #exclude float NaN values        if min_log == min_log:            try:                return float(min_log)            except:                #e.g. 29m13s 29m 13s                m_s = re.compile('\d+\s*[mM]\s*\d+\s*[sS]')                #e.g. 7 minutes, 7 min, 7 Minutes, 7 Min                number_text = re.compile(r"\d+\s+[A-Za-z]+\S")                #e.g. 30:29                time_colon = re.compile('\d+\s*[:]\s*\d+')                try:                     if re.match(m_s, min_log):                        _ = min_log.split()                        return int(round(float(_[0][:-1])                                     + float(_[1][:-1]) / 60,0))                    elif re.match(number_text, min_log):                        _ = min_log.split()[0]                        return int(_)                    elif re.match(time_colon, min_log):                        _ = min_log.split(':')                        return int(round(float(_[0]) + float(_[1]) / 60,0))                    else:                        raise                except:                    arcpy.AddMessage('There was an issue'                                        f'with the entry: {min_log}')                    return None                           @staticmethod           def clean_batt(batt):        '''Helper function:            Some records show battery as e.g. 3 bars, as entered                by the user. This function sets those records to None.        '''        if batt != 'nan':            try:                return float(batt)            except:                return None        @staticmethod    def batt_type(batt):        '''Helper function:            Classify batteries into battery types from their labels        '''        #some Wingtra batteries in Hornbill have multiple spaces        wingtra = r'SEGG\s+WFW'        if (batt.startswith('CCI B')           or batt.startswith('SEGG DJI')):            return 'DJI P4 Type'        elif re.match(wingtra, batt):            return 'Wingtra Gen 1 Type'        elif 'MnS2' in batt:            return 'DJI Mini 2 Type'        elif 'Mv3' in batt:            return 'DJI Mavic 3 Type'        elif 'M600' in batt:            return 'DJI M600 Type'        #initially the Mini 3 batteries were just H&S01        elif (batt.startswith('H&S0')            or 'Mn3' in batt            or 'MINI3' in batt):            return 'DJI Mini 3 Type'        else:            return None           @staticmethod    def convert_dates_to_consistent_format(df, column_name):    # Create a list to store the parsed dates        parsed_dates = []        for date_str in df[column_name]:            # Define regular expressions for yyyy-mm-dd and dd-mm-yyyy formats            yyyy_mm_dd_pattern = re.compile(r'^\d{4}-\d{2}-\d{2}$')            dd_mm_yyyy_pattern = re.compile(r'^\d{2}-\d{2}-\d{4}$')            if re.match(yyyy_mm_dd_pattern, date_str):                # If it matches yyyy-mm-dd, parse it with that format                date = parse(date_str, dayfirst=False)                parsed_dates.append(date)            elif re.match(dd_mm_yyyy_pattern, date_str):                # If it matches dd-mm-yyyy, parse it with that format                date = parse(date_str, dayfirst=True)                parsed_dates.append(date)            else:                # If it doesn't match either format, add a placeholder                parsed_dates.append(pd.NaT)        # Replace the original column with the parsed dates        df[column_name] = parsed_dates        return df            @staticmethod        def clean_df(df, levels=True):        if levels:            df.columns = df.columns.get_level_values(1)        df.columns.values[0] = 'SR'        df.columns.values[1] = 'logged on'        def process_questions(self):        self.df_rawq = pd.read_csv(self.csv                                    , parse_dates=['Requests->Date Logged']                                    , dayfirst=True                                    )        #harmonising different field names after form changes to keep old names        #harmonise field name Take-off time        self.df_rawq['Questions->Question'] \            .replace('Take-off time (hh:mm)',\                     'Take-off time',\                     inplace=True)         #harmonise field name Flight duration - Day (default)        self.df_rawq['Questions->Question'] \            .replace('Flight duration - Day (default) '\                     '[enter whole minutes as a number]',\                     'Flight duration - Day (default)',\                     inplace=True)        #harmonise field name Flight duration - Night (default)        self.df_rawq['Questions->Question'] \            .replace('Flight duration - Night (default) '\                     '[enter whole minutes as a number]',\                     'Flight duration - Night (default)',\                     inplace=True)        # pivot SR report                     df_q = (self.df_rawq.loc[:,['Requests->Request ID',                                    'Requests->Date Logged',                                    'Questions->Question',                                    'Questions->Answer',]].pivot_table(                        index=['Requests->Request ID', 'Requests->Date Logged']                        ,columns=['Questions->Question']                        ,values=['Questions->Answer']                        ,aggfunc='first'                        )                     .reset_index()                    )        #reduce column levels after pivot        self.clean_df(df_q)              #AGOL cannot add columns later, if no one has logged night flight        #   or obs in training the column won't be created                if 'Flight duration - Night' not in df_q.columns:            df_q.insert(16, 'Flight duration - Night', 0)        if 'Observer-in-training' not in df_q.columns:            df_q.insert(21, 'Observer-in-training')        #clean up user entries for minutes        df_q['Flight duration - Day (default)'] = \                df_q['Flight duration - Day (default)'] \                .apply(lambda x: self.clean_minutes(x))        df_q['Flight duration - Night'] = \                df_q['Flight duration - Night'] \                .apply(lambda x: self.clean_minutes(x))        #fill empty mintutes with 0        df_q['Flight duration - Day (default)'] = \                df_q['Flight duration - Day (default)'] \                .fillna(0)        df_q['Flight duration - Night'] = \                df_q['Flight duration - Night'] \                .fillna(0)        #calculate total minutes of day and night minutes                df_q['Total minutes'] = \                df_q['Flight duration - Day (default)'] \                + df_q['Flight duration - Night']        #check for non numeric user entries in battery                df_q['Battery percentage after flight/maintenance/charging'] = \                df_q['Battery percentage after flight/maintenance/charging'] \                .apply(lambda x: self.clean_batt(x))        df_q['Battery percentage before flight/maintenance/charging'] = \                df_q['Battery percentage before flight/maintenance/charging'] \                .apply(lambda x: self.clean_batt(x))        df_q['Battery voltage after flight/maintenance/charging'] = \                df_q['Battery voltage after flight/maintenance/charging'] \                .apply(lambda x: self.clean_batt(x))        df_q['Battery voltage before flight/maintenance/charging'] =  \                df_q['Battery voltage before flight/maintenance/charging'] \                .apply(lambda x: self.clean_batt(x))        #set battery types        df_q['batt_type'] = df_q['Battery ID'] \                .apply(self.batt_type)        #normalise date formats        df_q = self.convert_dates_to_consistent_format(df_q, 'Date of activity')        #data cleaning as SDM cannot delete jobs        df_q.drop(df_q[df_q.SR.isin(self.drop_list)].index, inplace = True)        #fix battery id SDM error with spaces        df_q['Battery ID'] =  \                df_q['Battery ID'] \                .str.replace(' +', ' ', regex=True)        #tidy up drone ids that were changed in SDM        mapping = {'H&S Mavic 3 Pro':                                'H&S Mavic 3 Pro Cine (1581F6MKC235B024440X)',                   'SAH Mavic 3M':'SAH Mavic3M (1581F5FKD235N00D505P)',}        df_q['Drone System'] = df_q['Drone System'].replace(mapping)        #tidy up battery ids that were changed in SDM        mapping = {'H&S01': 'H&S-Mn3-01',                    'H&S02': 'H&S-Mn3-02',                    'H&S03': 'H&S-Mn3-03',}        df_q['Battery ID'] = df_q['Battery ID'].replace(mapping)        return df_q             def find_ft(self, service_type):        arcpy.AddMessage(self.agol_csv)        try:            return gis.content.search(                    query=f'title:"{self.agol_csv}" AND type:"{service_type}"'                    )[0]        except:            return None            def create_or_replace_local_csv(self):        wkspc = Path(self.csv).parent        self.local_csv = wkspc / f'{self.agol_csv}.csv'        self.df.to_csv(self.local_csv, index_label='ID')            def csv_publish(self):        self.ft_item = self.find_ft('Feature Service')        if self.ft_item and not self.overwrite:            raise OverwriteProtection(self.agol_csv)        else:            try:                self.find_ft('CSV').delete                self.ft_item.delete()            except:                pass            self.upload_csv()            params={'type':'csv'                    ,'locationType':'none'                    ,'capabilities':'Query,Extract'}            self.ft = self.agol_csv_item.publish(publish_parameters=params)            def upload_csv(self):        try:            gis.content.search(                                query=f'title:"{self.agol_csv}" '                                'AND type:"CSV"')[0] \                .delete()        except:            pass        csv_properties = {'title':self.agol_csv                      ,'description':'UAS logs from Service Delivery Manager'                      ,'tags':'UoP,UAS,logs'                      }        self.agol_csv_item = gis.content.add(                                            item_properties=csv_properties                                            ,data=self.local_csv                                            ,folder=self.agol_folder                                            )                def ft_update(self):        self.ft_item = self.find_ft('Feature Service')        arcpy.AddMessage(self.ft_item)        if self.ft_item:            fl_collection = FeatureLayerCollection.fromitem(self.ft_item)            msg = fl_collection.manager.overwrite(str(self.local_csv))            print(msg)            update_dict = {'capabilities':'Query,Extract'}            fl_collection.manager.update_definition(update_dict)            self.local_csv.unlink()        else:            raise FeatureNotPublishedclass UASLogs(BasicLogs):    def __init__(self                 , csv                 , agol_folder                 , agol_csv                 , overwrite=False):        super().__init__(csv                 , agol_folder                 , agol_csv                 , overwrite)        self.df = self.process_questions()        self.create_or_replace_local_csv()                class BatteryLog(BasicLogs):    def __init__(self                 , csv                 , agol_folder                 , agol_csv                 , overwrite=False):        super().__init__(csv                 , agol_folder                 , agol_csv                 , overwrite)        self.df = self.process_battery()        self.create_or_replace_local_csv()    def process_battery(self):        self.df = self.process_questions()        df_b = self.df.loc[:,['Battery ID',                     'Battery log entry type',                    'Battery percentage after flight/maintenance/charging',                    'Battery percentage before flight/maintenance/charging',                    'Battery voltage after flight/maintenance/charging',                    'Battery voltage before flight/maintenance/charging',                    'Date of activity',                     'Total minutes',                    'batt_type',]].reset_index().dropna()        cols=['idx',                'battery_id',                 'log_type',                 'pcnt_after',                'pcnt_before',                'v_after',                'v_before',                 'date_of_activity',                 'Total minutes',                'batt_type',]        df_b.columns = cols        df_b = pd.wide_to_long(df_b,                       ['pcnt','v'],                       i=['idx',                            'battery_id',                            'log_type',                            'date_of_activity',],                       j='label',                       sep='_',                       suffix=r'\w+',                      ).reset_index()        return df_bclass RegLog(BasicLogs):    def __init__(self                 ,csv                 ,agol_folder                 ,agol_csv                 ,uas_or_rp                                  ,overwrite=False):        super().__init__(csv                 ,agol_folder                 ,agol_csv                 ,overwrite)        self.uas_or_rp = uas_or_rp        self.df = self.process_questions()        self.create_or_replace_local_csv()            def process_questions(self):        self.df_rawq = pd.read_csv(self.csv                                  , parse_dates=['Requests->Date Logged']                                  , dayfirst=True)        uas_cols = ['SR'                ,'logged on'                ,'Authorised pilots'                ,'Expected Annual Flying Time (hours)'                ,'Insured Value'                ,'Is a detachable payload fitted to this unit?'                ,'Is the Drone'                ,'Is the UAS home built?'                ,'MTOW (maximum take-off weight in Kilos) inclusive of payload'                ,'Main Territory of Operation'                ,'Manufacturer or Make of Drone'                ,'Mass/Weight in grams including battery'                ,'Model of Drone'                ,'Number of Rotors'                ,'Please detail the payload type'                ,'Serial Number or Registration Number'                ,'Your Department'                ]        rp_cols = ['SR'                ,'logged on'                ,'A2CofC - RAE (name and number)'                ,'A2CofC issue date'                ,'Chief Drone Pilot Training Provider (Name)'                ,'Chief Drone Pilot issue date'                ,'Faculty/School/Service department'                ,'Flyer ID'                ,'Flyer ID issue date'                ,'Flying experience prior to registration (hours)'                ,'GVC - RAE (name and number)'                ,'GVC issue date'                ,'Name of Remote Pilot'                ,'NQE FR issue date'                ,'NQE organisation (name and number)'                ,"Please enter 'Other' qualification(s)"                ,'Qualifications'                ,'Type of GVC/NQE qualification (Only current qualification)'                ,'UOP UAS Course completed?'                ]        #fix old SDM format        self.df_rawq['Requests->Summary'][self.df_rawq['Requests->Summary']                              .str                              .startswith(self.uas_or_rp)].apply(lambda x:                                             x.replace('Staff UAS Form'                                                        ,'UAS Staff Drone'))        df_reg = self.df_rawq[self.df_rawq['Requests->Summary']                              .str                              .startswith(self.uas_or_rp)]        df_reg = (df_reg.pivot_table(index=['Requests->Request ID'                                            , 'Requests->Date Logged']                                            ,columns=['Questions->Question']                                            ,values=['Questions->Answer']                                            ,aggfunc='first')          .reset_index()         )        df_reg.columns = df_reg.columns.get_level_values(1)        #data cleaning        self.clean_df(df_reg, False)             df_reg.drop(df_reg[df_reg.SR.isin(self.drop_list)].index                    , inplace = True                    )        #date handling        try:            df_reg['A2CofC issue date'] =  \                pd.to_datetime(df_reg['A2CofC issue date'])        except:            pass        try:            df_reg['Flyer ID issue date'] =  \                pd.to_datetime(df_reg['Flyer ID issue date'])        except:            pass        try:            df_reg['GVC issue date'] =  \                pd.to_datetime(df_reg['GVC issue date'])        except:            pass        try:            df_reg['NQE FR issue date'] =  \                pd.to_datetime(df_reg['NQE FR issue date'])        except:            pass        return df_reg                              class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "PTB_Create_and_update_UAS_Logs.pyt"        self.alias = "Manage UAS Logs in AGOL"        # List of tool classes associated with this toolbox        self.tools = (                        [UASWeeklyUpdate                        ,UASLogUpdate                         ,UASLogPublish                        ,UASLogOverwrite                        ,UASBattUpdate                        ,UASBattOverwrite                        ,UASBattLogPublish                        ,UASRegUpdate                        ,UASRegOverwrite                        ,UASRegLogPublish                        ,UASRPUpdate                        ,UASRPOverwrite                        ,UASRPLogPublish                        ]                        )class UASWeeklyUpdate(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "00 Update UAS Logs with new CSV (Both CSV)"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )        param1 = arcpy.Parameter(                                name='csv_input2',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input')          params = [param0, param1]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv1 = parameters[0].valueAsText        csv2 = parameters[1].valueAsText        uc = UASLogs(csv1                    , uas_folder                    , uas_log)        uc.ft_update()        #battery update        uc = BatteryLog(csv1                    , uas_folder                    , batt_log)        uc.ft_update()        #reg update        uc = RegLog(csv2                    , uas_folder                    , reg                    , 'UAS Staff Drone')        uc.ft_update()        #rp update        uc = RegLog(csv2                    , uas_folder                    , rp                    , 'Remote Pilot Registration')        uc.ft_update()        #clean up        Path(csv1).unlink()        Path(csv2).unlink()                return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass UASLogUpdate(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "01 Update UAS Logs with new CSV (Question CSV)"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction='Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = uas_log                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = UASLogs(csv                    , folder                    , layer)        uc.ft_update()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass UASLogOverwrite(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = 'DANGER - Overwrite CSV and Feature ' \                        'Service (Necessitates dashboard rewrite)'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = uas_log                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = UASLogs(csv, folder, layer, overwrite=True)        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return                class UASLogPublish(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Create Fligth Log CSV and Feature Service from scratch"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = uas_log                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = UASLogs(csv, folder, layer)        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return        class UASBattUpdate(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "02 Update UAS Battery Logs with new CSV (Question CSV)"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction='Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )                                param1.value = uas_folder        param2.value = batt_log            params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = BatteryLog(csv, folder, layer)        uc.ft_update()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass UASBattOverwrite(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = 'DANGER - Overwrite battery CSV and Feature Service' \                        '(Necessitates dashboard rewrite)'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = batt_log                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = BatteryLog(csv, folder, layer, overwrite=True)        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return                       class UASBattLogPublish(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Create Battery CSV and Feature Service from scratch"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: UAS Questions_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = batt_log                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = BatteryLog(csv, folder, layer)        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return            class UASRegUpdate(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = '03 Update UAS Registrations with ' \                        'new CSV (Registration CSV)'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input')                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction='Input')        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input')          param1.value = uas_folder        param2.value = reg            #param3.filter.list = ['UAS Staff Drone'        #                        ,'Remote Pilot Registration']        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = RegLog(csv, folder, layer, 'UAS Staff Drone')        uc.ft_update()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass UASRegOverwrite(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = 'DANGER - Overwrite registration CSV and Feature ' \                    'Service (Necessitates dashboard rewrite)'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = reg                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = RegLog(csv, folder, layer, 'UAS Staff Drone', overwrite=True)        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return                       class UASRegLogPublish(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Create Registration CSV and Feature Service from scratch"        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = reg                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = RegLog(csv, folder, layer, 'UAS Staff Drone')        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return            class UASRPUpdate(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = '04 Update Remote Pilot Registrations with new ' \                    'CSV (Registration CSV)'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction='Input'                                )                                        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param1.value = uas_folder        param2.value = rp           params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = RegLog(csv                    , folder                    , layer                    , 'Remote Pilot Registration')        uc.ft_update()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        returnclass UASRPOverwrite(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = 'DANGER - Overwrite Remote Pilot Registration CSV ' \                    'and Feature Service (Necessitates dashboard rewrite)'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input'                                )                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input'                                )         param2.value = rp                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = RegLog(csv                    , folder                    , layer                    , 'Remote Pilot Registration'                    , overwrite=True)        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return                       class UASRPLogPublish(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = 'Create Remote Pilot Registration CSV and Feature ' \                    'Service from scratch'        self.description = ""        self.canRunInBackground = True    def getParameterInfo(self):        """Define parameter definitions"""        param0 = arcpy.Parameter(                                name='csv_input',                                displayName='CSV file: ' \                                            'UAS Registrations_xxxx.csv',                                datatype='DEFile',                                parameterType='Required',                                direction= 'Input')                param1 = arcpy.Parameter(                                name='agol_folder',                                displayName='AGOL Folder',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input')        param2 = arcpy.Parameter(                                name='agol_layer',                                displayName='AGOL Layer Name',                                datatype='GPString',                                parameterType='Required',                                direction= 'Input')         param2.value = rp                                    param1.value = uas_folder        params = [param0, param1, param2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        csv = parameters[0].valueAsText        folder = parameters[1].valueAsText        layer = parameters[2].valueAsText        uc = RegLog(csv                    , folder                    , layer                    , 'Remote Pilot Registration')        uc.csv_publish()        Path(csv).unlink()        return    def postExecute(self, parameters):        """This method takes place after outputs are processed and        added to the display."""        return                                        